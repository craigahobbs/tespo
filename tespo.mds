# Licensed under the MIT License
# https://github.com/craigahobbs/tespo/blob/main/LICENSE


# Include sentinel
if getGlobal('tespo') then
    return
endif


# The TESPO algorithm
function tespo(input)
    solarPower = objectGet(input, 'solarPower')
    homePower = objectGet(input, 'homePower')
    homeBattery = objectGet(input, 'homeBattery')
    vehicles = objectGet(input, 'vehicles')
    homeBatteryFull = objectGet(input, 'homeBatteryFull', tespoDefaultHomeBatteryFull)
    minVehicleChargingLimit = objectGet(input, 'minVehicleChargingLimit', tespoDefaultVehicleChargingLimitMin)
    maxVehicleChargingLimit = objectGet(input, 'maxVehicleChargingLimit', tespoDefaultVehicleChargingLimitMax)
    chargingRateIncrement = objectGet(input, 'chargingRateIncrement', tespoDefaultChargingRateIncrement)

    # Is the home battery charged?
    isHomeBatteryCharged = (homeBattery >= homeBatteryFull)

    # Create the output object
    outputVehicles = arrayNew()
    output = objectNew('vehicles', outputVehicles)

    # Compute the available solar power
    availableSolar = solarPower - homePower
    foreach vehicle in vehicles do
        # If vehicle is charging, add its charging power back to the available power for
        # re-computing the optimal charging rate below
        vehicleBattery = objectGet(vehicle, 'battery')
        vehicleChargingLimit = objectGet(vehicle, 'chargingLimit')
        if vehicleBattery < vehicleChargingLimit then
            # P = V * I
            vehicleChargingRate = objectGet(vehicle, 'chargingRate')
            vehicleChargingVoltage = objectGet(vehicle, 'chargingVoltage')
            availableSolar = availableSolar + vehicleChargingVoltage * vehicleChargingRate / 1000
        endif
    endforeach
    availableSolar = mathMax(availableSolar, 0)

    # Determine each vehicle's charging state
    chargingSolar = availableSolar
    foreach vehicle in vehicles do
        vehicleID = objectGet(vehicle, 'id')
        vehicleBattery = objectGet(vehicle, 'battery')
        vehicleMinChargingRate = objectGet(vehicle, 'minChargingRate')
        vehicleChargingVoltage = objectGet(vehicle, 'chargingVoltage')

        # Start each vehicle with minimal charging rate and charging limit
        outputVehicle = objectNew( \
            'id', vehicleID, \
            'chargingRate', vehicleMinChargingRate, \
            'chargingLimit', minVehicleChargingLimit \
        )
        arrayPush(outputVehicles, outputVehicle)

        # We can charge the vehicle if:
        # - the home battery is full
        # - the vehicle battery is not full
        # - there is available solar power to charge at its mimimum rate
        vehicleMinChargingPower = vehicleChargingVoltage * vehicleMinChargingRate / 1000
        if isHomeBatteryCharged \
                && vehicleBattery < maxVehicleChargingLimit \
                && vehicleMinChargingPower < chargingSolar then
            # Set the maximum charging limit
            objectSet(outputVehicle, 'chargingLimit', maxVehicleChargingLimit)

            # Deduct the minimum charging power
            chargingSolar = chargingSolar - vehicleMinChargingPower
        endif
    endforeach

    # Compute each vehicle's charging settings
    chargingLoop:
        chargingChanged = false
        foreach vehicle, ixVehicle in vehicles do
            vehicleMaxChargingRate = objectGet(vehicle, 'maxChargingRate')
            vehicleChargingVoltage = objectGet(vehicle, 'chargingVoltage')

            # Get the vehicle charging state
            outputVehicle = arrayGet(outputVehicles, ixVehicle)
            vehicleChargingRate = objectGet(outputVehicle, 'chargingRate')
            vehicleChargingLimit = objectGet(outputVehicle, 'chargingLimit')

            # We can charge the vehicle more if:
            # - the vehicle is charging
            # - the vehicle is not already at its maximum charge rate
            # - there is available solar power to charge it
            chargingPowerIncrement = vehicleChargingVoltage * chargingRateIncrement / 1000
            if vehicleChargingLimit == maxVehicleChargingLimit \
                    && chargingRateIncrement <= vehicleMaxChargingRate - vehicleChargingRate \
                    && chargingPowerIncrement <= chargingSolar then
                # Note that charging has changed
                chargingChanged = true

                # Increase the charging rate and deduct the charging power increase
                objectSet(outputVehicle, 'chargingRate', vehicleChargingRate + chargingRateIncrement)
                chargingSolar = chargingSolar - chargingPowerIncrement
            endif
        endforeach
    jumpif (chargingChanged) chargingLoop

    # Set available solar power and the spilling state
    objectSet(output, 'availableSolar', if(isHomeBatteryCharged, mathRound(availableSolar, 3), 0))
    objectSet(output, 'spilling', isHomeBatteryCharged && availableSolar > 0 && availableSolar == chargingSolar)

    return output
endfunction


# Validate a TESPO input object
function tespoValidateInput(input)
    return schemaValidate(tespoTypes, 'TespoInput', input)
endfunction


# Validate a TESPO output object
function tespoValidateOutput(output)
    return schemaValidate(tespoTypes, 'TespoOutput', output)
endfunction


# TESPO input defaults
tespoDefaultHomeBatteryFull = 90
tespoDefaultVehicleChargingLimitMin = 50
tespoDefaultVehicleChargingLimitMax = 90
tespoDefaultChargingRateIncrement = 1


# TESPO schemas
tespoTypes = schemaParse( \
    '# The Tesla Energy Self-Powered Optimizer (TESPO) algorithm input', \
    'struct TespoInput', \
    '', \
    '    # The current average solar power generation in kW', \
    '    float(>= 0) solarPower', \
    '', \
    '    # The current average home power usage in kW', \
    '    float(>= 0) homePower', \
    '', \
    '    # The home battery charge percentage', \
    '    float(>= 0, <= 100) homeBattery', \
    '', \
    '    # The vehicles connected to the home with charging enabled', \
    '    Vehicle[] vehicles', \
    '', \
    '    # Optional home battery-full percentage (default is ' + tespoDefaultHomeBatteryFull + '%).', \
    "    # Vehicles aren't charged until the home battery is full.", \
    '    optional int(> 0, <=100) homeBatteryFull', \
    '', \
    '    # Optional minimum vehicle charging limit as a percentage (default is ' + tespoDefaultVehicleChargingLimitMin + '%)', \
    '    optional int(> 0, <= 100) minVehicleChargingLimit', \
    '', \
    '    # Optional maximum vehicle charging limit as a percentage (default is ' + tespoDefaultVehicleChargingLimitMax + '%)', \
    '    optional int(> 0, <= 100) maxVehicleChargingLimit', \
    '', \
    '    # Optional vehicle charging rate increment in amps (default is ' + tespoDefaultChargingRateIncrement, \
    '    # ' + if(tespoDefaultChargingRateIncrement == 1, 'amp', 'amps') + ')', \
    '    optional int(> 0) chargingRateIncrement', \
    '', \
    '', \
    '# A connected battery-powered electric vehicle with charging enabled', \
    'struct Vehicle', \
    '', \
    '    # The vehicle ID', \
    '    string(len > 0) id', \
    '', \
    "    # The vehicle's battery charge as a percentage", \
    '    float(>= 0, <= 100) battery', \
    '', \
    "    # The vehicle's battery capacity in kWh", \
    '    int(> 0) batteryCapacity', \
    '', \
    '    # The charging limit as a percentage', \
    '    float(>= 0, <= 100) chargingLimit', \
    '', \
    '    # The charging rate in amps', \
    '    int(> 0) chargingRate', \
    '', \
    '    # The minimum charging rate in amps', \
    '    int(> 0) minChargingRate', \
    '', \
    '    # The maximum charging rate in amps', \
    '    int(> 0) maxChargingRate', \
    '', \
    '    # The charging voltage', \
    '    int(> 0) chargingVoltage', \
    '', \
    '', \
    '# The Tesla Energy Self-Powered Optimizer (TESPO) algorithm output', \
    'struct TespoOutput', \
    '', \
    '    # The vehicle charging settings', \
    '    VehicleCharging[] vehicles', \
    '', \
    '    # The available solar power in kW. This is zero until the home battery is fully charged.', \
    '    float(>= 0) availableSolar', \
    '', \
    '    # If true, excess solar power is "spilling" to the grid', \
    '    bool spilling', \
    '', \
    '', \
    "# Set a vehicle's charging on or off", \
    'struct VehicleCharging', \
    '', \
    '    # The vehicle ID', \
    '    string(len > 0) id', \
    '', \
    '    # The charging rate in amps', \
    '    int(> 0) chargingRate', \
    '', \
    '    # The charging limit as a percentage', \
    '    float(> 0, <= 100) chargingLimit' \
)
