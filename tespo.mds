# Licensed under the MIT License
# https://github.com/craigahobbs/tespo/blob/main/LICENSE


# Include sentinel
if getGlobal('tespo') then
    return
endif


# The TESPO algorithm
function tespo(input)
    solarPower = objectGet(input, 'solarPower')
    homePower = objectGet(input, 'homePower')
    homeBattery = objectGet(input, 'homeBattery')
    vehicles = objectGet(input, 'vehicles')

    # Compute the available solar power (remove current vehicle charging power)
    availableSolar = solarPower - homePower
    foreach vehicle in vehicles do
        # P = V * I
        if objectGet(vehicle, 'battery') < objectGet(vehicle, 'chargingLimit') then
            availableSolar = availableSolar + objectGet(vehicle, 'chargingRate') * objectGet(vehicle, 'chargingVoltage') / 1000
        endif
    endforeach

    # Is the home battery charged?
    isHomeBatteryCharged = homeBattery >= tespoHomeLimit
    allBatteriesCharged = isHomeBatteryCharged

    # Add the charging action for each vehicle
    vehicleChargings = arrayNew()
    output = objectNew('vehicles', vehicleChargings)
    foreach vehicle in vehicles do
        battery = objectGet(vehicle, 'battery')
        minChargingRate = objectGet(vehicle, 'minChargingRate')
        maxChargingRate = objectGet(vehicle, 'maxChargingRate')

        # Set vehicle charging off
        actionChargingRate = minChargingRate
        actionChargingLimit = tespoMinChargingLimit

        # Home battery not yet fully charged?
        if isHomeBatteryCharged then
            # Vehicle fully charged?
            isVehicleCharged = (battery >= tespoMaxChargingLimit)
            allBatteriesCharged = allBatteriesCharged && isVehicleCharged
            if !isVehicleCharged then
                # Enough solar power to charge the vehicle?
                # I = P / V
                chargingVoltage = objectGet(vehicle, 'chargingVoltage')
                availableSolarRate = (availableSolar * 1000) / chargingVoltage
                bestChargingRate = 0
                chargingRateTest = minChargingRate
                while chargingRateTest <= maxChargingRate do
                    bestChargingRate = if(chargingRateTest <= availableSolarRate, \
                        mathMax(bestChargingRate, chargingRateTest), bestChargingRate)
                    chargingRateTest = chargingRateTest + 1
                endwhile
                if bestChargingRate != 0 then
                    # Charge the vehicle
                    actionChargingRate = bestChargingRate
                    actionChargingLimit = tespoMaxChargingLimit

                    # Reduce the available solar power
                    chargingPower = actionChargingRate * chargingVoltage / 1000
                    availableSolar = availableSolar - chargingPower
                endif
            endif
        endif

        # Add the vehicle model
        arrayPush(vehicleChargings, objectNew( \
            'id', objectGet(vehicle, 'id'), \
            'chargingRate', actionChargingRate, \
            'chargingLimit', actionChargingLimit \
        ))
    endforeach

    # Set the excess solar power
    excessSolar = if(allBatteriesCharged && availableSolar > tespoMinSolarExcess, availableSolar, 0)
    objectSet(output, 'availableSolar', if(isHomeBatteryCharged, mathRound(mathMax(availableSolar, 0), 3), 0))
    objectSet(output, 'excessSolar', mathRound(excessSolar, 3))

    return output
endfunction


# TESPO schemas
tespoTypes = schemaParse( \
    '# The Tesla Energy Self-Powered Optimizer (TESPO) service input', \
    'struct TespoInput', \
    '', \
    '    # The current average solar power generation (kW)', \
    '    float(>= 0) solarPower', \
    '', \
    '    # The current average home power usage (kW)', \
    '    float(>= 0) homePower', \
    '', \
    '    # The home battery power percentage', \
    '    float(>= 0, <= 100) homeBattery', \
    '', \
    '    # The connected battery-powered electric vehicles', \
    '    Vehicle[] vehicles', \
    '', \
    '', \
    '# A battery-powered electric vehicle', \
    'struct Vehicle', \
    '', \
    '    # The vehicle ID', \
    '    string(len > 0) id', \
    '', \
    "    # The vehicle's battery power percentage", \
    '    float(>= 0, <= 100) battery', \
    '', \
    "    # The vehcile's battery capacity (kWh)", \
    '    int(> 0) batteryCapacity', \
    '', \
    '    # The charging limit, as a percentage', \
    '    float(>= 0, <= 100) chargingLimit', \
    '', \
    '    # The charging rate (amps)', \
    '    int(> 0) chargingRate', \
    '', \
    '    # The minimum charging rate (amps)', \
    '    int(> 0) minChargingRate', \
    '', \
    '    # The maximum charging rate (amps)', \
    '    int(> 0) maxChargingRate', \
    '', \
    '    # The charging voltage (V)', \
    '    int(> 0) chargingVoltage', \
    '', \
    '', \
    '# The Tesla Energy Self-Powered Optimizer (TESPO) service output', \
    'struct TespoOutput', \
    '', \
    '    # The vehicle-charging actions', \
    '    VehicleCharging[] vehicles', \
    '', \
    '    # The available solar power (kW)', \
    '    float(>= 0) availableSolar', \
    '', \
    '    # The excess solar power (kW)', \
    '    float(>= 0) excessSolar', \
    '', \
    '', \
    "# Set a vehicle's charging on or off", \
    'struct VehicleCharging', \
    '', \
    '    # The vehicle ID', \
    '    string(len > 0) id', \
    '', \
    '    # The charging rate (amps)', \
    '    int(> 0) chargingRate', \
    '', \
    '    # The charging limit, as a percentage', \
    '    float(>= 0, <= 100) chargingLimit', \
    '', \
    '', \
    '# A vehicle charging scenario', \
    'struct VehicleScenario', \
    '', \
    '    # The scenario vehicles', \
    '    Vehicle[len > 0] vehicles', \
    '', \
    '    # The vehicle daily activity', \
    '    VehicleDay[len > 0] days', \
    '', \
    '', \
    '# A vehicle daily activity list', \
    'typedef VehicleActivity[] VehicleDay', \
    '', \
    '', \
    '# A vehicle activity. Vehicles first depart and later arrive back.', \
    'struct VehicleActivity', \
    '', \
    '    # The vehicle index', \
    '    int(>= 0) index', \
    '', \
    '    # The vehicle departure hour', \
    '    float(>= 0, <=24) departure', \
    '', \
    '    # The vehicle arrival hour', \
    '    float(>= 0, <=24) arrival', \
    '', \
    '    # The battery power used (kWh)', \
    '    float batteryUsed' \
)


# The percentage at which the home battery is considered full
tespoHomeLimit = 90

# The minimum/maximum charging limits for vehicles
tespoMinChargingLimit = 50
tespoMaxChargingLimit = 90

# The minimum solar power (kWh) that is considered excess solar power
tespoMinSolarExcess = 1
