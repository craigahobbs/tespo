# Licensed under the MIT License
# https://github.com/craigahobbs/tespo/blob/main/LICENSE


# Include sentinel
if getGlobal('tespo') then
    return
endif


# The TESPO algorithm
function tespo(input)
    solarPower = objectGet(input, 'solarPower')
    homePower = objectGet(input, 'homePower')
    homeBattery = objectGet(input, 'homeBattery')
    vehicles = objectGet(input, 'vehicles')
    homeBatteryFull = objectGet(input, 'homeBatteryFull', tespoDefaultHomeBatteryFull)
    minVehicleChargingLimit = objectGet(input, 'minVehicleChargingLimit', tespoDefaultVehicleChargingLimitMin)
    maxVehicleChargingLimit = objectGet(input, 'maxVehicleChargingLimit', tespoDefaultVehicleChargingLimitMax)
    minSolarExcess = objectGet(input, 'minSolarExcess', tespoDefaultSolarExcessMin)

    # Compute the available solar power
    availableSolar = solarPower - homePower
    foreach vehicle in vehicles do
        # If vehicle is charging, add the power back to available power so we can re-compute the
        # optimal charging rate below
        vehicleBattery = objectGet(vehicle, 'battery')
        vehicleChargingLimit = objectGet(vehicle, 'chargingLimit')
        if vehicleBattery < vehicleChargingLimit then
            # P = V * I
            vehicleChargingRate = objectGet(vehicle, 'chargingRate')
            vehicleChargingVoltage = objectGet(vehicle, 'chargingVoltage')
            availableSolar = availableSolar + vehicleChargingRate * vehicleChargingVoltage / 1000
        endif
    endforeach

    # Is the home battery charged?
    isHomeBatteryCharged = (homeBattery >= homeBatteryFull)
    allBatteriesCharged = isHomeBatteryCharged

    # Sort the input vehicle array by maximum charging rate, ascending. Vehicles with lower maximum
    # charging rates will have lower charging rates on average. Therefore, more of the available
    # solar power is available to subsequent vehicles for charging.
    dataSort(vehicles, arrayNew(arrayNew('maxChargingRate')))

    # Create the output object
    chargingVehicles = arrayNew()
    output = objectNew('vehicles', chargingVehicles)

    # Compute the new charging settings for each vehicle
    foreach vehicle in vehicles do
        vehicleID = objectGet(vehicle, 'id')
        vehicleBattery = objectGet(vehicle, 'battery')
        vehicleMinChargingRate = objectGet(vehicle, 'minChargingRate')
        vehicleMaxChargingRate = objectGet(vehicle, 'maxChargingRate')
        vehicleChargingVoltage = objectGet(vehicle, 'chargingVoltage')

        # Set vehicle charging to minimum
        newChargingRate = vehicleMinChargingRate
        newChargingLimit = minVehicleChargingLimit

        # Is this vehicle not yet fully charged? Only charge vehicles if the home battery is full.
        if isHomeBatteryCharged && vehicleBattery < maxVehicleChargingLimit then
            # Not all batteries are fully charged
            allBatteriesCharged = false

            # Compute the vehicle's charging rate (I = P / V)
            availableSolarRate = (availableSolar * 1000) / vehicleChargingVoltage
            newChargingRate = vehicleMaxChargingRate
            while newChargingRate > vehicleMinChargingRate do
                # Do we have enough power to charge at this rate?
                if newChargingRate < availableSolarRate then
                    # Yes, set to charge fully
                    newChargingLimit = maxVehicleChargingLimit

                    # Reduce the available solar power (P = I * V)
                    availableSolar = availableSolar - newChargingRate * vehicleChargingVoltage / 1000
                    break
                endif
                newChargingRate = newChargingRate - 1
            endwhile
        endif

        # Add the vehicle model
        arrayPush(chargingVehicles, objectNew( \
            'id', vehicleID, \
            'chargingRate', newChargingRate, \
            'chargingLimit', newChargingLimit \
        ))
    endforeach

    # Set available solar power and the spilling state
    objectSet(output, 'availableSolar', if(isHomeBatteryCharged, mathRound(mathMax(availableSolar, 0), 3), 0))
    objectSet(output, 'spilling', allBatteriesCharged && availableSolar > minSolarExcess)

    return output
endfunction


# TESPO schemas
tespoTypes = schemaParse( \
    '# The Tesla Energy Self-Powered Optimizer (TESPO) algorithm input', \
    'struct TespoInput', \
    '', \
    '    # The current average solar power generation (kW)', \
    '    float(>= 0) solarPower', \
    '', \
    '    # The current average home power usage (kW)', \
    '    float(>= 0) homePower', \
    '', \
    '    # The home battery power percentage', \
    '    float(>= 0, <= 100) homeBattery', \
    '', \
    '    # The vehicles connected to the home with charging enabled', \
    '    Vehicle[] vehicles', \
    '', \
    "    # Optional home battery-full percentage (default is 90). Vehicles aren't charged until the", \
    '    # home battery is full.', \
    '    optional int(> 0, <=100) homeBatteryFull = 90', \
    '', \
    '    # Optional minimum vehicle charging limit as a percentage (default is 50)', \
    '    optional int(> 0, <= 100) minVehicleChargingLimit', \
    '', \
    '    # Optional maximum vehicle charging limit as a percentage (default is 90)', \
    '    optional int(> 0, <= 100) maxVehicleChargingLimit', \
    '', \
    '    # The minimum solar power that is considered excess solar power (kW, default is 1)', \
    '    optional float(> 0) minSolarExcess', \
    '', \
    '', \
    '# A battery-powered electric vehicle', \
    'struct Vehicle', \
    '', \
    '    # The vehicle ID', \
    '    string(len > 0) id', \
    '', \
    "    # The vehicle's battery power percentage", \
    '    float(>= 0, <= 100) battery', \
    '', \
    "    # The vehcile's battery capacity (kWh)", \
    '    int(> 0) batteryCapacity', \
    '', \
    '    # The charging limit, as a percentage', \
    '    float(>= 0, <= 100) chargingLimit', \
    '', \
    '    # The charging rate (amps)', \
    '    int(> 0) chargingRate', \
    '', \
    '    # The minimum charging rate (amps)', \
    '    int(> 0) minChargingRate', \
    '', \
    '    # The maximum charging rate (amps)', \
    '    int(> 0) maxChargingRate', \
    '', \
    '    # The charging voltage (V)', \
    '    int(> 0) chargingVoltage', \
    '', \
    '', \
    '# The Tesla Energy Self-Powered Optimizer (TESPO) algorithm output', \
    'struct TespoOutput', \
    '', \
    '    # The new vehicle charging settings', \
    '    VehicleCharging[] vehicles', \
    '', \
    '    # The available solar power (kW)', \
    '    float(>= 0) availableSolar', \
    '', \
    '    # If true, there is solar spillage to the grid', \
    '    bool spilling', \
    '', \
    '', \
    "# Set a vehicle's charging on or off", \
    'struct VehicleCharging', \
    '', \
    '    # The vehicle ID', \
    '    string(len > 0) id', \
    '', \
    '    # The charging rate (amps)', \
    '    int(> 0) chargingRate', \
    '', \
    '    # The charging limit, as a percentage', \
    '    float(>= 0, <= 100) chargingLimit', \
    '', \
    '', \
    '# A vehicle charging scenario', \
    'struct VehicleScenario', \
    '', \
    '    # The scenario vehicles', \
    '    Vehicle[len > 0] vehicles', \
    '', \
    '    # The vehicle daily activity', \
    '    VehicleDay[len > 0] days', \
    '', \
    '', \
    "# A vehicle's daily activity", \
    'struct VehicleDay', \
    '', \
    "    # The vehicle's departures", \
    '    VehicleDeparture[] departures', \
    '', \
    '', \
    '# A vehicle departure and arrival', \
    'struct VehicleDeparture', \
    '', \
    '    # The vehicle ID', \
    '    string(len > 0) id', \
    '', \
    '    # The vehicle departure hour', \
    '    float(>= 0, <=24) departure', \
    '', \
    '    # The vehicle arrival hour', \
    '    float(>= 0, <=24) arrival', \
    '', \
    '    # The battery power used (kWh)', \
    '    float batteryPercentChange' \
)


# TESPO input defaults
tespoDefaultHomeBatteryFull = 90
tespoDefaultVehicleChargingLimitMin = 50
tespoDefaultVehicleChargingLimitMax = 90
tespoDefaultSolarExcessMin = 1
