# Licensed under the MIT License
# https://github.com/craigahobbs/tespo/blob/main/LICENSE


# Include sentinel
if runtimeGetGlobal('powerwallSimulate'):
    return
endif


include 'tespo.mds'


# Compute the Powerwall scenario's initial battery charge percentage
function powerwallBatteryPercent(powerwallScenario)
    data = objectGet(powerwallScenario, 'data')
    row0 = arrayGet(data, 0)
    row1 = arrayGet(data, 1)
    return 2 * objectGet(row0, powerwallFieldBatteryPercent) - objectGet(row1, powerwallFieldBatteryPercent)
endfunction


# Compute the Powerwall scenario's data row duration
function powerwallRowDuration(powerwallScenario)
    data = objectGet(powerwallScenario, 'data')
    row0 = arrayGet(data, 0)
    row1 = arrayGet(data, 1)
    return (objectGet(row1, powerwallFieldDate) - objectGet(row0, powerwallFieldDate)) / (60 * 60 * 1000)
endfunction


# Powerwall data field names
powerwallFieldBatteryPercent = 'Energy Remaining (%)'
powerwallFieldDate = 'Date time'
powerwallFieldGrid = 'Grid (kW)'
powerwallFieldHome = 'Home (kW)'
powerwallFieldPowerwall = 'Powerwall (kW)'
powerwallFieldSolar = 'Solar (kW)'


# Simulated data field names
powerwallFieldBackupPercent = 'Backup (%)'


# The simulation number precision
powerwallSimulationPrecision = 3


# Simulate a Tesla Powerwall scenario
#
# Arguments:
#   powerwallScenario: the Powerwall scenario model
#   batteryPercent: Optional - the initial battery percent
#   vehicleScenario: Optional - the vehicle scenario model
#   tespoRows: Optional - if non-zero, the number of rows to compute the TESPO average home and solar power
#
function powerwallSimulate(powerwallScenario, batteryPercent, vehicleScenario, tespoRows)
    # Powerwall specifications
    batteryCapacityKwh = objectGet(powerwallScenario, 'batteryCapacity')
    backupPercent = objectGet(powerwallScenario, 'backupPercent')
    chargeRatio = objectGet(powerwallScenario, 'chargeRatio')
    dischargeRatio = objectGet(powerwallScenario, 'dischargeRatio')
    data = objectGet(powerwallScenario, 'data')

    # Compute the row duration
    durationHours = powerwallRowDuration(powerwallScenario)
    rowsPerDay = 24 / durationHours

    # Compute backup energy
    backupKwh = backupPercent * batteryCapacityKwh / 100

    # Simulate each data row
    simulated = arrayNew()
    for row, ixRow in data:
        simulatedRow = objectNew(powerwallFieldDate, objectGet(row, powerwallFieldDate))

        # Get the home and solar energy
        homeKw = objectGet(row, powerwallFieldHome)
        solarKw = objectGet(row, powerwallFieldSolar)

        # Compute battery energy
        batteryKwh = batteryPercent * batteryCapacityKwh / 100

        # Add simulated vehicle charging home power usage
        if vehicleScenario:
            days = objectGet(vehicleScenario, 'days')
            vehicles = objectGet(vehicleScenario, 'vehicles')

            # Get this day's departures
            ixDay = mathFloor(ixRow / rowsPerDay)
            hourOfDay = (ixRow % rowsPerDay) * durationHours
            vehicleDay = arrayGet(days, ixDay % arrayLength(days))

            # Did any vehicles arrive this period? If so, update their battery energy.
            tespoInputVehicles = arrayNew()
            for vehicle, ixVehicle in vehicles:
                vehicleID = objectGet(vehicle, 'id')
                vehicleBatteryPercent = objectGet(vehicle, 'battery')

                # Is the vehicle connnected?
                if !powerwallVehicleDeparted(vehicleDay, vehicleID, hourOfDay):
                    # Include in TESPO
                    arrayPush(tespoInputVehicles, vehicle)

                    # Did the vehicle just arrive?
                    vehicleDeparture = if(hourOfDay > 0, powerwallVehicleDeparted(vehicleDay, vehicleID, hourOfDay - durationHours))
                    if vehicleDeparture:
                        # Yes, update the vehicle's battery percentage
                        vehicleBatteryPercentChange = objectGet(vehicleDeparture, 'batteryChange')
                        vehicleBatteryPercent = vehicleBatteryPercent + vehicleBatteryPercentChange
                        objectSet(vehicle, 'battery', vehicleBatteryPercent)
                    endif
                endif
            endfor

            # Adjust vehicle charging with TESPO?
            if tespoRows:
                # Compute the average solar and home energy usage
                ixTespoRow = ixRow - tespoRows
                tespoHomeSum = 0
                tespoSolarSum = 0
                while ixTespoRow < ixRow:
                    tespoRow = if(ixTespoRow >= 0, arrayGet(data, ixTespoRow), row)
                    tespoHomeSum = tespoHomeSum + objectGet(tespoRow, powerwallFieldHome)
                    tespoSolarSum = tespoSolarSum + objectGet(tespoRow, powerwallFieldSolar)
                    ixTespoRow = ixTespoRow + 1
                endwhile

                # Call TESPO
                tespoInput = objectNew( \
                  'solarPower', tespoSolarSum / tespoRows, \
                  'homePower', tespoHomeSum / tespoRows, \
                  'homeBattery', batteryPercent, \
                  'vehicles', tespoInputVehicles \
                )
                tespoOutput = tespo(tespoInput)
                tespoOutputVehicles = objectGet(tespoOutput, 'vehicles')

                # Update each vehicle's charging
                for tespoOutputVehicle in tespoOutputVehicles:
                    tespoOutputVehicleID = objectGet(tespoOutputVehicle, 'id')
                    tespoChargingLimit = objectGet(tespoOutputVehicle, 'chargingLimit')
                    tespoChargingRate = objectGet(tespoOutputVehicle, 'chargingRate')
                    for vehicle in vehicles:
                        vehicleID = objectGet(vehicle, 'id')
                        if vehicleID == tespoOutputVehicleID:
                            objectSet(vehicle, 'chargingLimit', tespoChargingLimit)
                            objectSet(vehicle, 'chargingRate', tespoChargingRate)
                            break
                        endif
                    endfor
                endfor
            endif

            # Simulate each connected vehicle
            for vehicle, ixVehicle in vehicles:
                vehicleID = objectGet(vehicle, 'id')
                vehicleBatteryPercent = objectGet(vehicle, 'battery')
                vehicleBatteryCapacity = objectGet(vehicle, 'batteryCapacity')
                vehicleChargingLimit = objectGet(vehicle, 'chargingLimit')
                vehicleChargingRate = objectGet(vehicle, 'chargingRate')
                vehicleChargingVoltage = objectGet(vehicle, 'chargingVoltage')
                vehicleBatteryKwh = vehicleBatteryPercent * vehicleBatteryCapacity / 100
                vehicleChargingLimitKwh = vehicleChargingLimit * vehicleBatteryCapacity / 100

                # Is the vehicle connnected?
                vehicleConnected = 0
                vehicleChargeKw = 0
                if !powerwallVehicleDeparted(vehicleDay, vehicleID, hourOfDay):
                    vehicleConnected = ixVehicle + 1

                    # Is the vehicle charging?
                    if vehicleBatteryPercent < vehicleChargingLimit:
                        # Add the vehicle charge energy to the home power usage
                        vehicleChargeKw = vehicleChargingRate * vehicleChargingVoltage / 1000
                        vehicleChargeKwh = vehicleChargeKw * durationHours
                        vehicleChargeMaxKwh = vehicleChargingLimitKwh - vehicleBatteryKwh
                        if vehicleChargeKwh > vehicleChargeMaxKwh:
                            vehicleChargeKw = vehicleChargeMaxKwh / durationHours
                            vehicleChargeKwh = vehicleChargeMaxKwh
                        endif
                        homeKw = homeKw + vehicleChargeKw

                        # Compute the new battery energy
                        vehicleBatteryKwh = vehicleBatteryKwh + vehicleChargeKwh
                        vehicleBatteryPercent = 100 * vehicleBatteryKwh / vehicleBatteryCapacity
                        objectSet(vehicle, 'battery', vehicleBatteryPercent)
                    endif
                endif

                # Add the vehicle fields
                objectSet(simulatedRow, 'Vehicle ' + vehicleID + ' Connected', vehicleConnected)
                objectSet(simulatedRow, 'Vehicle ' + vehicleID + ' (kWh)', mathRound(-vehicleChargeKw, powerwallSimulationPrecision))
                objectSet(simulatedRow, 'Vehicle ' + vehicleID + ' Battery (%)', mathRound(vehicleBatteryPercent, powerwallSimulationPrecision))
                objectSet(simulatedRow, 'Vehicle ' + vehicleID + ' Charging Rate (amps)', mathRound(vehicleChargingRate, powerwallSimulationPrecision))
                objectSet(simulatedRow, 'Vehicle ' + vehicleID + ' Charging Limit (%)', mathRound(vehicleChargingLimit, powerwallSimulationPrecision))
            endfor
        endif

        # Are we generating more solar energy than we're currently using?
        powerwallKw = homeKw - solarKw
        if solarKw > homeKw:
            # Is the battery fully charged? If so, "spill" to the grid.
            if batteryPercent >= 100:
                gridKw = powerwallKw
                powerwallKw = 0
                batteryNewKwh = batteryKwh
            else:
                # Charge the battery - did we exceed the battery's capacity?
                batteryNewKwh = batteryKwh - powerwallKw * chargeRatio * durationHours
                if batteryNewKwh > batteryCapacityKwh:
                    # Battery is full - output excess energy to the grid
                    batteryNewKwh = batteryCapacityKwh
                    powerwallKw = ((batteryKwh - batteryCapacityKwh) / chargeRatio) / durationHours
                    gridKw = homeKw - solarKw - powerwallKw
                else:
                    # Battery is charging
                    gridKw = 0
                endif
            endif

        # No, we are using more energy than we are generating
        else:
            # Is the battery at or below the backup limit? If so, pull from the grid.
            if batteryPercent <= backupPercent:
                gridKw = powerwallKw
                powerwallKw = 0
                batteryNewKwh = batteryPercent * batteryCapacityKwh / 100
            else:
                # Discharge the battery - did we run out of battery power?
                batteryNewKwh = batteryKwh - ((homeKw - solarKw) / dischargeRatio) * durationHours
                if batteryNewKwh < backupKwh:
                    # Battery is empty - pull from the grid
                    batteryNewKwh = backupKwh
                    powerwallKw = ((batteryKwh - backupKwh) * dischargeRatio) / durationHours
                    gridKw = homeKw - solarKw - powerwallKw
                else:
                    # Battery is discharging
                    gridKw = 0
                endif
            endif
        endif

        # Update the battery percentage
        batteryPercent = 100 * batteryNewKwh / batteryCapacityKwh

        # Push the simulated row
        objectSet(simulatedRow, powerwallFieldHome, mathRound(homeKw, powerwallSimulationPrecision))
        objectSet(simulatedRow, powerwallFieldSolar, mathRound(solarKw, powerwallSimulationPrecision))
        objectSet(simulatedRow, powerwallFieldPowerwall, mathRound(powerwallKw, powerwallSimulationPrecision))
        objectSet(simulatedRow, powerwallFieldGrid, mathRound(gridKw, powerwallSimulationPrecision))
        objectSet(simulatedRow, powerwallFieldBatteryPercent, mathRound(batteryPercent, powerwallSimulationPrecision))
        objectSet(simulatedRow, powerwallFieldBackupPercent, backupPercent)
        arrayPush(simulated, simulatedRow)
    endfor

    return simulated
endfunction


# Determine if a vehicle is away from the home
function powerwallVehicleDeparted(vehicleDay, vehicleID, hourOfDay)
    departures = objectGet(vehicleDay, 'departures')
    for departure in departures:
        departureID = objectGet(departure, 'id')
        departureHour = objectGet(departure, 'departure')
        arrivalHour = objectGet(departure, 'arrival')
        if vehicleID == departureID && hourOfDay >= departureHour && hourOfDay <= arrivalHour:
            return departure
        endif
    endfor
    return null
endfunction


# Validate a vehicle scenario object
function powerwallValidateVehicleScenario(vehicleScenario)
    return schemaValidate(powerwallTypes, 'VehicleScenario', vehicleScenario)
endfunction


# Load a Powerwall simulation scenario
async function powerwallLoadScenario(scenarioURL)
    # Load the scenario file
    powerwallScenario = httpFetch(scenarioURL)
    powerwallScenario = if(powerwallScenario != null, schemaValidate(powerwallTypes, 'PowerwallScenario', powerwallScenario))
    if powerwallScenario == null:
        return null
    endif

    # Fixup relative data URLs
    dataURLs = objectGet(powerwallScenario, 'dataURLs')
    scenarioBaseURL = powerwallGetBaseURL(scenarioURL)
    for dataURL, ixDataURL in dataURLs:
        if powerwallIsRelativeURL(dataURL):
            arraySet(dataURLs, ixDataURL, scenarioBaseURL + dataURL)
        endif
    endfor

    # Load the scenario data files
    dataCSVs = httpFetch(dataURLs, null, true)
    data = arrayNew()
    for dataCSV in dataCSVs:
        dataPart = if(dataCSV != null, dataParseCSV(dataCSV))
        if dataPart == null:
            return null
        endif
        arrayExtend(data, dataPart)
    endfor
    dataSort(data, arrayNew(arrayNew(powerwallFieldDate)))
    objectSet(powerwallScenario, 'data', data)

    # Fill-in any battery percentage data holes
    ixPrev = null
    batteryPercentPrev = null
    batteryDeltaPrev = 0
    for row, ixRow in data:
        batteryPercent = objectGet(row, powerwallFieldBatteryPercent)
        if batteryPercent:
            if ixPrev != null:
                # Set interpolated battery percent values between non-null values
                ixHole = ixPrev + 1
                while ixHole < ixRow:
                    holePercent = batteryPercentPrev + ((ixHole - ixPrev) / (ixRow - ixPrev)) * (batteryPercent - batteryPercentPrev)
                    objectSet(arrayGet(data, ixHole), powerwallFieldBatteryPercent, holePercent)
                    ixHole = ixHole + 1
                endwhile
                batteryDeltaPrev = batteryPercent - batteryPercentPrev
            endif
            ixPrev = ixRow
            batteryPercentPrev = batteryPercent
        endif
    endfor

    # Any trailing holes? If so, set to the previous value
    if batteryPercentPrev != null:
        dataLength = arrayLength(data)
        ixHole = ixPrev + 1
        holePercent = batteryPercentPrev
        while ixHole < dataLength:
            holePercent = holePercent + batteryDeltaPrev
            objectSet(arrayGet(data, ixHole), powerwallFieldBatteryPercent, holePercent)
            ixHole = ixHole + 1
        endwhile
    endif

    return powerwallScenario
endfunction


# Is a URL relative?
function powerwallIsRelativeURL(url)
    return !regexTest(powerwallRegexNotRelativeURL, url)
endfunction

powerwallRegexNotRelativeURL = regexNew('^(?:[a-z]+:|\\/|\\?|#)')


# Compute a URL's base
function powerwallGetBaseURL(url)
    return stringSlice(url, 0, stringLastIndexOf(url, '/') + 1)
endfunction


# Powerwall simulation scenario JSON schema
powerwallTypes = schemaParseEx( \
    arrayNew( \
        '# Tesla Powerwall simulation scenario', \
        'struct PowerwallScenario', \
        '', \
        '    # The scenario name', \
        '    string name', \
        '', \
        '    # Optional previous Powerwall scenario URL', \
        '    optional string prevScenarioURL', \
        '', \
        '    # Optional next Powerwall scenario URL', \
        '    optional string nextScenarioURL', \
        '', \
        '    # The Powerwall battery capacity in kWh', \
        '    float(> 0) batteryCapacity', \
        '', \
        '    # The self-powerered minimum battery percentage', \
        '    int(>= 0, <= 100) backupPercent', \
        '', \
        '    # The Powerwall charge loss ratio - the ratio of battery input power to power stored', \
        '    float(> 0, < 1) chargeRatio', \
        '', \
        '    # The Powerwall discharge loss ratio - the ratio of battery output power to power discharged', \
        '    float(> 0, < 1) dischargeRatio', \
        '', \
        '    # The list of Tesla app daily energy data URLs', \
        '    string[len > 0] dataURLs', \
        '', \
        '', \
        '# A vehicle charging scenario', \
        'struct VehicleScenario', \
        '', \
        '    # The scenario name', \
        '    string name', \
        '', \
        '    # The scenario vehicles', \
        '    Vehicle[len > 0] vehicles', \
        '', \
        '    # The vehicle daily activity', \
        '    VehicleDay[len > 0] days', \
        '', \
        '', \
        "# A vehicle's daily activity", \
        'struct VehicleDay', \
        '', \
        "    # The vehicle's departures", \
        '    VehicleDeparture[] departures', \
        '', \
        '', \
        '# A vehicle departure and arrival', \
        'struct VehicleDeparture', \
        '', \
        '    # The vehicle ID', \
        '    string id', \
        '', \
        '    # The vehicle departure hour', \
        '    float(>= 0, <=24) departure', \
        '', \
        '    # The vehicle arrival hour', \
        '    float(>= 0, <=24) arrival', \
        '', \
        '    # The battery charge change as percentage', \
        '    float batteryChange' \
    ), \
    objectCopy(tespoTypes) \
)
