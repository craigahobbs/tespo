# Licensed under the MIT License
# https://github.com/craigahobbs/tespo/blob/main/LICENSE


# Include sentinel
if getGlobal('powerwallSimulate') then
    return
endif


include 'tespo.mds'


# Compute the initial battery charge percentage for a Powerwall scenario
function powerwallBatteryPercent(powerwallScenario)
    data = objectGet(powerwallScenario, 'data')
    row0 = arrayGet(data, 0)
    row1 = arrayGet(data, 1)
    return 0.5 * (objectGet(row0, powerwallFieldBatteryPercent) + objectGet(row1, powerwallFieldBatteryPercent))
endfunction


# Simulate a Tesla Powerwall scenario
function powerwallSimulate(scenario, batteryPercent)
    # Powerwall specifications
    batteryCapacityKwh = objectGet(scenario, 'batteryCapacity')
    backupPercent = objectGet(scenario, 'backupPercent')
    chargeRatio = objectGet(scenario, 'chargeRatio')
    dischargeRatio = objectGet(scenario, 'dischargeRatio')
    data = objectGet(scenario, 'data')

    # Compute the row duration
    row0 = arrayGet(data, 0)
    row1 = arrayGet(data, 1)
    durationHours = (objectGet(row1, powerwallFieldDate) - objectGet(row0, powerwallFieldDate)) / (60 * 60 * 1000)

    # Simulate each data row
    simulated = arrayNew()
    foreach row in data do
        # Get the home and solar energy
        homeKw = objectGet(row, powerwallFieldHome)
        solarKw = objectGet(row, powerwallFieldSolar)

        # Compute battery power and backup power
        batteryKwh = batteryPercent * batteryCapacityKwh / 100
        backupKwh = backupPercent * batteryCapacityKwh / 100

        # Are we generating more solar energy than we're currently using?
        powerwallKw = homeKw - solarKw
        if solarKw > homeKw then
            # Charge the battery - did we exceed the battery's capacity?
            batteryNewKwh = batteryKwh + (solarKw - homeKw) * chargeRatio * durationHours
            if batteryNewKwh > batteryCapacityKwh then
                # Battery is full - output excess energy to the grid
                batteryNewKwh = batteryCapacityKwh
                powerwallKw = ((batteryKwh - batteryCapacityKwh) / chargeRatio) / durationHours
                gridKw = -solarKw - powerwallKw
            else then
                # Battery is charging
                gridKw = 0
            endif

        # No, we are using more energy than we are generating
        else then
            # Discharge the battery - did we run out of battery power?
            batteryNewKwh = batteryKwh - ((homeKw - solarKw) / dischargeRatio) * durationHours
            if batteryNewKwh < backupKwh then
                # Battery is empty - pull from the grid
                batteryNewKwh = backupKwh
                powerwallKw = ((batteryKwh - backupKwh) * dischargeRatio) / durationHours
                gridKw = homeKw - powerwallKw
            else then
                # Battery is discharging
                gridKw = 0
            endif
        endif

        # Update the battery percentage
        batteryPercent = 100 * batteryNewKwh / batteryCapacityKwh

        # Push the simulated row
        arrayPush(simulated, objectNew( \
            powerwallFieldDate, objectGet(row, powerwallFieldDate), \
            powerwallFieldHome, mathRound(homeKw, 3), \
            powerwallFieldSolar, mathRound(solarKw, 3), \
            powerwallFieldPowerwall, mathRound(powerwallKw, 3), \
            powerwallFieldGrid, mathRound(gridKw, 3), \
            powerwallFieldBatteryPercent, mathRound(batteryPercent, 3) \
        ))
    endforeach

    return simulated
endfunction


# Determine if a vehicle is away from the home
function powerwallVehicleDeparted(vehicleDay, vehicleID, hourOfDay)
    departures = objectGet(vehicleDay, 'departures')
    foreach departure in departures do
        departureID = objectGet(departure, 'id')
        departureHour = objectGet(departure, 'departure')
        arrivalHour = objectGet(departure, 'arrival')
        if vehicleID == departureID && hourOfDay >= departureHour && hourOfDay <= arrivalHour then
            return departure
        endif
    endforeach
    return null
endfunction


# Validate a vehicle scenario object
function powerwallValidateVehicleScenario(vehicleScenario)
    return schemaValidate(powerwallTypes, 'VehicleScenario', vehicleScenario)
endfunction


# Load a Powerwall simulation scenario
async function powerwallLoadScenario(scenarioURL)
    # Load the scenario file
    scenario = schemaValidate(powerwallTypes, 'PowerwallScenario', fetch(scenarioURL))

    # Fixup relative data URLs
    dataURLs = objectGet(scenario, 'dataURLs')
    scenarioBaseURL = powerwallGetBaseURL(scenarioURL)
    foreach dataURL, ixDataURL in dataURLs do
        if powerwallIsRelativeURL(dataURL) then
            arraySet(dataURLs, ixDataURL, scenarioBaseURL + dataURL)
        endif
    endforeach

    # Load the scenario data files
    dataCSVs = fetch(dataURLs, null, true)
    data = arrayNew()
    foreach dataCSV in dataCSVs do
        arrayExtend(data, dataParseCSV(dataCSV))
    endforeach
    dataSort(data, arrayNew(arrayNew(powerwallFieldDate)))
    objectSet(scenario, 'data', data)

    # Fill-in any battery percentage data holes
    ixPrev = null
    foreach row, ixRow in data do
        batteryPercent = objectGet(row, powerwallFieldBatteryPercent)
        if batteryPercent != null then
            if ixPrev != null then
                # Set interpolated battery percent values between non-null values
                prevPercent = objectGet(arrayGet(data, ixPrev), powerwallFieldBatteryPercent)
                ixHole = ixPrev + 1
                while ixHole < ixRow do
                    holePercent = prevPercent + ((ixHole - ixPrev) / (ixRow - ixPrev)) * (batteryPercent - prevPercent)
                    objectSet(arrayGet(data, ixHole), powerwallFieldBatteryPercent, holePercent)
                    ixHole = ixHole + 1
                endwhile
            endif
            ixPrev = ixRow
        endif
    endforeach

    # Any trailing nulls? If so, set to the previous value
    if ixPrev != null then
        prevPercent = objectGet(arrayGet(data, ixPrev), powerwallFieldBatteryPercent)
        dataLength = arrayLength(data)
        ixHole = ixPrev + 1
        while ixHole < dataLength do
            objectSet(arrayGet(data, ixHole), powerwallFieldBatteryPercent, prevPercent)
            ixHole = ixHole + 1
        endwhile
    endif

    return scenario
endfunction


# Is a URL relative?
function powerwallIsRelativeURL(url)
    return !regexTest(powerwallRegexNotRelativeURL, url)
endfunction

powerwallRegexNotRelativeURL = regexNew('^(?:[a-z]+:|\\/|\\?|#)')


# Compute a URL's base
function powerwallGetBaseURL(url)
    return stringSlice(url, 0, stringLastIndexOf(url, '/') + 1)
endfunction


# Powerwall simulation scenario JSON schema
powerwallTypes = schemaParseEx( \
    arrayNew( \
        '# Tesla Powerwall simulation scenario', \
        'struct PowerwallScenario', \
        '', \
        '    # The scenario name', \
        '    string(len > 0) name', \
        '', \
        '    # The Powerwall battery capacity in kWh', \
        '    float(> 0) batteryCapacity', \
        '', \
        '    # The self-powerered minimum battery percentage', \
        '    int(>= 0, <= 100) backupPercent', \
        '', \
        '    # The Powerwall charge loss ratio - the ratio of battery input power to power stored', \
        '    float(> 0, < 1) chargeRatio', \
        '', \
        '    # The Powerwall discharge loss ratio - the ratio of battery output power to power discharged', \
        '    float(> 0, < 1) dischargeRatio', \
        '', \
        '    # The list of Tesla app daily energy data URLs', \
        '    string(len > 0)[len > 0] dataURLs', \
        '', \
        '', \
        '# A vehicle charging scenario', \
        'struct VehicleScenario', \
        '', \
        '    # The scenario vehicles', \
        '    Vehicle[len > 0] vehicles', \
        '', \
        '    # The vehicle daily activity', \
        '    VehicleDay[len > 0] days', \
        '', \
        '', \
        "# A vehicle's daily activity", \
        'struct VehicleDay', \
        '', \
        "    # The vehicle's departures", \
        '    VehicleDeparture[] departures', \
        '', \
        '', \
        '# A vehicle departure and arrival', \
        'struct VehicleDeparture', \
        '', \
        '    # The vehicle ID', \
        '    string(len > 0) id', \
        '', \
        '    # The vehicle departure hour', \
        '    float(>= 0, <=24) departure', \
        '', \
        '    # The vehicle arrival hour', \
        '    float(>= 0, <=24) arrival', \
        '', \
        '    # The battery charge change as percentage', \
        '    float batteryPercentChange' \
    ), \
    objectCopy(tespoTypes) \
)


# Powerwall data field names
powerwallFieldBatteryPercent = 'Energy Remaining (%)'
powerwallFieldDate = 'Date time'
powerwallFieldGrid = 'Grid (kW)'
powerwallFieldHome = 'Home (kW)'
powerwallFieldPowerwall = 'Powerwall (kW)'
powerwallFieldSolar = 'Solar (kW)'
